{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Task Pro",
        "description": "API documentation for GoIT project **Task Pro**"
    },
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "servers": [
        {
            "url": "https://project-seventeam07.onrender.com"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "Users endpoints"
        },
        {
            "name": "Boards",
            "description": "Boards endpoints"
        },
        {
            "name": "Columns",
            "description": "Columns endpoints"
        },
        {
            "name": "Cards",
            "description": "Cards endpoints"
        }
    ],
    "paths": {
        "/api/users/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Sign up new user - User registration",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSignupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "New user created, registration successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSignupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBadRequest"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Such email is already registered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorConflict"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "Sign in existing user - User login",
                "parameters": [],
                "requestBody": {
                    "description": "# Опис параметрів запиту:\n\n**email** - string, електронна пошта користувача. **Обов'язковий параметр**\n\n**password** - string, зашифрований пароль користувача. **Обов'язковий параметр**\n",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created session for existing user, login successful\n \n Опис параметрів відповіді:\n \n JSON-об'єкт, який містить інформацію про поточного авторизованого користувача.\n \n **_id** - ObjectId, унікальний ідентифікатор користувача\n \n  **name** - string, ім'я користувача.\n \n **email** - string, електронна пошта користувача.\n \n **avatarURL** - string, пустий рядок поки юзер не має аватара.\n \n **userTheme** - string, тема, обрана користувачем.\n \n **accessToken, refreshToken** - string, токен використовується для зберігання стану авторизації користувача в системі, що дозволяє користувачам здійснювати захищені запити до API. Токен є довільним рядком символів і генерується при кожній новій авторизації користувача.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserLoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Email or password is wrong",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Description of the error."
                                        }
                                    }
                                },
                                "example": {
                                    "message": "Email or password is wrong"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/logout": {
            "post": {
                "tags": ["Auth"],
                "summary": "User logout",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - User signed out"
                    },
                    "401": {
                        "description": "Bearer auth failed - Якщо запит не містить дійсний токен або токен вже вичерпав свій термін дії, сервер поверне відповідь з кодом статусу HTTP 401",
                        "content": {
                        "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/current": {
            "get": {
                "tags": ["Auth"],
                "summary": "Get current user info",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged user returned\n\nОпис параметрів відповіді:\n\nJSON-об'єкт, який містить інформацію про поточного авторизованого користувача.\n\n**_id** - ObjectId, унікальний ідентифікатор користувача\n\n **name** - string, ім'я користувача.\n\n**email** - string, електронна пошта користувача.\n\n**avatarURL** - string, пустий рядок поки юзер не має аватара.\n\n**userTheme** - string, тема, обрана користувачем.\n\n**accessToken, refreshToken** - string, токен використовується для зберігання стану авторизації користувача в системі, що дозволяє користувачам здійснювати захищені запити до API. Токен є довільним рядком символів і генерується при кожній новій авторизації користувача.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserLoginResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed - Якщо запит не містить дійсний токен або токен вже вичерпав свій термін дії, сервер поверне відповідь з кодом статусу HTTP 401",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ErrorUnautorized"
                            }
                        }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ErrorServerResponse"
                            }
                        }
                        }
                    }
                }
            }
        },
        "/api/users/theme": {
        "patch": {
            "tags": ["Auth"],
            "summary": "Change user theme",
            "parameters": [],
            "security": [
            {
                "bearerAuth": []
            }
            ],
            "requestBody": {
            "required": true,
            "description": "# Опис параметрів запиту:\n\n**userTheme** - string, обрана тема користувача, значення має бути з масиву [\"light\", \"dark\", \"violet\"]. **Обов'язковий параметр**\n",
            "content": {
                "application/json": {
                "schema": {
                    "$ref": "#/components/schemas/ChangeThemeRequest"
                }
                }
            }
            },
            "responses": {
            "200": {
                "description": "Change user theme successful\n \n Опис параметрів відповіді:\n \n JSON-об'єкт, який містить інформацію про оновленого користувача.\n \n **_id** - ObjectId, унікальний ідентифікатор користувача\n \n  **name** - string, ім'я користувача.\n \n **email** - string, електронна пошта користувача.\n \n **avatarURL** - string, пустий рядок поки юзер не має аватара.\n \n **userTheme** - string, тема, обрана користувачем.\n \n **accessToken, refreshToken** - string, токен використовується для зберігання стану авторизації користувача в системі, що дозволяє користувачам здійснювати захищені запити до API. Токен є довільним рядком символів і генерується при кожній новій авторизації користувача.\n \n",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/UserLoginResponse"
                    }
                }
                }
            },
            "400": {
                "description": "Validation error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorBadRequest"
                    }
                }
                }
            },
            "401": {
                "description": "Bearer auth failed - Якщо запит не містить дійсний токен або токен вже вичерпав свій термін дії, сервер поверне відповідь з кодом статусу HTTP 401",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorUnautorized"
                    }
                }
                }
            },
            "500": {
                "description": "Server Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorServerResponse"
                    }
                }
                }
            }
            }
        }
        },
        "/api/users/update": {
            "patch": {
                "tags": ["Auth"],
                "summary": "Update user profile",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "# Опис параметрів запиту:\n\n**avatar** - file, отримує завантажений файл.\n\n**name** - string, ім'я користувача.\n\n**email** - string, електронна пошта користувача.\n\n**password** - string, зашифрований пароль користувача.\n\nПри зміні email або password видаляється пара токенів (refreshToken та accessToken) у поточного юзера.\n",
                    "content": {
                        "multipart/form-data": {
                        "schema": {
                            "$ref": "#/components/schemas/UpdateUserProfileRequest"
                        }
                        }
                    }
                },
                "responses": {
                "200": {
                    "description": "User successfully apdated\n \n Опис параметрів відповіді:\n \n JSON-об'єкт, який містить інформацію про оновленого користувача.\n \n **_id** - ObjectId, унікальний ідентифікатор користувача\n \n  **name** - string, ім'я користувача.\n \n **email** - string, електронна пошта користувача.\n \n **avatarURL** - string, пустий рядок поки юзер не має аватара.\n \n **userTheme** - string, тема, обрана користувачем.\n \n **accessToken, refreshToken** - string, токен використовується для зберігання стану авторизації користувача в системі, що дозволяє користувачам здійснювати захищені запити до API. Токен є довільним рядком символів і генерується при кожній новій авторизації користувача.\n",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/UpdateUserProfileResponse"
                        }
                    }
                    }
                },
                "400": {
                    "description": "Validation error or name, email are already in use",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                            "type": "string",
                            "description": "Description of the error."
                            }
                        }
                        },
                        "example": {
                        "message": "Bad request or name, email are already in use"
                        }
                    }
                    }
                },
                "401": {
                    "description": "Bearer auth failed - Якщо запит не містить дійсний токен або токен вже вичерпав свій термін дії, сервер поверне відповідь з кодом статусу HTTP 401",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorUnautorized"
                        }
                    }
                    }
                },
                "500": {
                    "description": "Server Error",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorServerResponse"
                        }
                    }
                    }
                }
                }
            }
        },
        "/api/users/help": {
            "post": {
                "tags": ["Auth"],
                "summary": "Send request help letter",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendHelpLetterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User help request letter have been successfully sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SendHelpLetterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed - Якщо запит не містить дійсний токен або токен вже вичерпав свій термін дії, сервер поверне відповідь з кодом статусу HTTP 401",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/refresh": {
            "post": {
                "tags": ["Auth"],
                "summary": "Refresh user token",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshTokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User`s tokens successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefreshTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBadRequest"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Cheking is user exists with such refreshToken.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefreshTokenForbidden"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/boards": {
            "get": {
                "tags": ["Boards"],
                "summary": "Get all user boards",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllBoardsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Boards"],
                "summary": "Add new board",
                "parameters": [],
                "security": [
                {
                    "bearerAuth": []
                }
                ],
                "requestBody": {
                "required": true,
                "description": "# Опис параметрів запиту:\n\n **title** - string, назва дошки. **Обов'язковий параметр**\n  \n**icon** - string, іконка дошки, значення має бути з масиву [ \"project\", \"star\", \"loading\", \"puzzle-piece\", \"container\", \"lightning\", \"colors\", \"hexagon\" ].\n  \n**background** - string, тег фону дошки, значення має бути з масиву [ \"no-background\",  \"magnolia\", \"starry-sky\", \"sakura\", \"half-moon\", \"palm-leaves\", \"clouds\", \"rocky-beach\", \"violet-circle\", \"full-moon\", \"yacht\", \"baloon\", \"mountains\", \"sea\", \"cappodocia\", \"night-trailer\" ].\n",
                "content": {
                    "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/AddBoardRequest"
                    }
                    }
                }
                },
                "responses": {
                "201": {
                    "description": "New board created\n\nОпис параметрів відповіді:\n\nJSON-об'єкт, що містить інформацію про нову дошку авторизованого користувача.\n\n**_id** - ObjectId, унікальний ідентифікатор дошки\n\n**title** - string, назва дошки.\n\n**icon** - string, іконка дошки.\n\n**background** - string, тег фону дошки.\n\n**backgroundURL** - object; пустий, якщо обране значення background тегу \"no-background\", інакще містить посилання на зображення фону картки \n\n**owner**:\n\n  **_id** - ObjectId, унікальний ідентифікатор користувача, якому належить дошка.\n\n  **name** - string, ім'я користувача.\n\n  **email** - string, електронна пошта користувача.\n\n  **avatarURL** - string, пустий рядок поки юзер не має аватара.\n\n  **userTheme** - string, тема, обрана користувачем.\n",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/AddBoardResponse"
                        }
                    }
                    }
                },
                "400": {
                    "description": "Validation error",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorAddBoard"
                        }
                    }
                    }
                },
                "401": {
                    "description": "Bearer auth failed - Якщо запит не містить дійсний токен або токен вже вичерпав свій термін дії, сервер поверне відповідь з кодом статусу HTTP 401",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorUnautorized"
                        }
                    }
                    }
                },
                "500": {
                    "description": "Server Error",
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorServerResponse"
                        }
                    }
                    }
                }
                }
            }
        },
        "/api/boards/{id}": {
            "get": {
                "tags": ["Boards"],
                "summary": "Get user board by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Board's id",
                        "schema": {
                        "type": "string"
                        },
                        "example": "64ef5eedd7daa47c3ec657cb"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board got by id",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/GetBoardByIdResponse"
                            }
                        }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBoardNotFound"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Boards"],
                "summary": "Delete board",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Board's id",
                        "schema": {
                        "type": "string"
                        },
                        "example": "64ef5eedd7daa47c3ec657cb"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteBoardResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBoardNotFound"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Boards"],
                "summary": "Update board by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Board's id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "64ef5eedd7daa47c3ec657cb"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBoardRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update board successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateBoardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBoardUpdate"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                        "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBoardNotFound"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                        "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/columns/{id}": {
            "post": {
                "tags": ["Columns"],
                "summary": "Add new column",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddColumnRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "New column created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddColumnResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestColumn"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Board for adding column not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBoardNotFound"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorConflictColumn"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Columns"],
                "summary": "Delete column",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Column's id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "64d360ea78fe376e4981199f"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                "200": {
                        "description": "Column deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteColumnResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnautorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundColumn"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Columns"],
                "summary": "Update column by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Column's id",
                        "schema": {
                            "type": "string"
                        },
                        "example": "exampleId"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "description": "",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateColumnRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Сolumn updated",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/UpdateColumnResponse"
                            }
                        }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/BadRequestColumn"
                            }
                        }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ErrorUnautorized"
                            }
                        }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/UpdateNotFoundColumn"
                            }
                        }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ErrorConflictColumn"
                            }
                        }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ErrorServerResponse"
                            }
                        }
                        }
                    }
                }
            }
        },
        "/api/cards": {
            "post": {
                "tags": ["Cards"],
                "summary": "Add new cards",
                "parameters": [],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                "description": "",
                "required": true,
                "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddCardsRequest"
                            }
                        }
                    }
                },
                "responses": {
                "201": {
                        "description": "New card created",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/AddCardsResponse"
                            }
                        }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/BadRequestCard"
                            }
                        }
                        }
                    },
                    "401": {
                        "description": "Bearer auth failed",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/ErrorUnautorized"
                            }
                        }
                        }
                    },
                    "404": {
                        "description": "Column for adding card not found",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/NotFoundColumn"
                            }
                        }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cards{id}": {
        "delete": {
            "tags": ["Cards"],
            "summary": "Delete cards",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Cards's id",
                    "schema": {
                        "type": "string"
                    },
                    "example": "64ec7c4dbab1cb55a780a0d4"
                }
            ],
            "security": [
                {
                    "bearerAuth": []
                }
            ],
            "responses": {
            "200": {
                "description": "Card deleted",
                "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/AddCardsResponse"
                        }
                    }
                }
            },
            "401": {
                "description": "Bearer auth failed",
                "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorUnautorized"
                        }
                    }
                }
            },
            "404": {
                "description": "Not found",
                "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/NotFoundCard"
                        }
                    }
                }
            },
            "500": {
                "description": "Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/ErrorServerResponse"
                        }
                    }
                }
            }
            }
        },
        "put": {
            "tags": ["Cards"],
            "summary": "Update cards by id",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Card's id",
                    "schema": {
                    "type": "string"
                    },
                    "example": "64ec7c4dbab1cb55a780a0d4"
                }
            ],
            "security": [
                {
                    "bearerAuth": []
                }
            ],
            "requestBody": {
                "description": "",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/UpdateCardRequest"
                        }
                    }
                }
            },
            "responses": {
            "200": {
                "description": "Card updated",
                "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/UpdateCardResponse"
                        }
                    }
                }
            },
            "400": {
                "description": "Validation error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/BadRequestCard"
                    }
                }
                }
            },
            "401": {
                "description": "Bearer auth failed",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorUnautorized"
                    }
                }
                }
            },
            "404": {
                "description": "Not found",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/NotFoundCard"
                    }
                }
                }
            },
            "500": {
                "description": "Server Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorServerResponse"
                    }
                }
                }
            }
            }
        }
        },
        "/api/cards{id}/transport": {
            "patch": {
                "tags": ["Cards"],
                "summary": "Transport card between columns",
                "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Cards's id",
                    "schema": {
                        "type": "string"
                    },
                    "example": "64ec7c4dbab1cb55a780a0d4"
                }
                ],
                "security": [
                {
                    "bearerAuth": []
                }
                ],
                "requestBody": {
                "description": "",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/TransportCardRequest"
                    }
                    }
                }
            },
            "responses": {
            "200": {
                "description": "Card transported",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/TransportCardResponse"
                    }
                }
                }
            },
            "400": {
                "description": "Validation error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/BadRequestColumn"
                    }
                }
                }
            },
            "401": {
                "description": "Bearer auth failed",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorUnautorized"
                    }
                }
                }
            },
            "404": {
                "description": "Not found",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/NotFoundCard"
                    }
                }
                }
            },
            "500": {
                "description": "Server Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/ErrorServerResponse"
                    }
                }
                }
            }
            }
        }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "schemas": {
            "UserSignupRequest": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User's name. It may contain Latin letters, numbers, signs, in different cases. It may include from 2 to 32 signs inclusive.",
                        "example": "Mark"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email. It may contain Latin letters, numbers, signs, in different cases. It must contain signs \"@\"\" and \".\" (in host part).",
                        "example": "mark@gmail.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password. It may contain Latin letters, numbers, signs, in different cases. It may include from 8 to 64 signs inclusive. Can't contain spaces.",
                        "example": "Mark1243"
                    }
                }
            },
            "UserSignupResponse": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "user's name",
                                "example": "Mark"
                            },
                            "email": {
                                "type": "string",
                                "description": "user's email",
                                "example": "mark@gmail.com"
                            },
                            "avatarURL": {
                                "type": "string",
                                "example": "",
                                "description": "no user's avatar yet"
                            },
                            "theme": {
                                "type": "string",
                                "description": "user's theme",
                                "example": "light"
                            }
                        }
                    }
                }
            },
            "UserLoginRequest": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email. It may contain Latin letters, numbers, signs, in different cases. It must contain signs \"@\"\" and \".\" (in host part).",
                        "example": "mark@gmail.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password. It may contain Latin letters, numbers, signs, in different cases. It may include from 8 to 64 signs inclusive. Can't contain spaces.",
                        "example": "Mark1243"
                    }
                }
            },
            "UserLoginResponse": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "user's name",
                                "example": "Mark"
                            },
                            "email": {
                                "type": "string",
                                "description": "user's email",
                                "example": "mark@gmail.com"
                            },
                            "avatarURL": {
                                "type": "string",
                                "example": "https://exampleURL",
                                "description": "link to user's avatar or empty string if user have no avatar yet"
                            },
                            "theme": {
                                "type": "string",
                                "description": "user's theme",
                                "example": "light"
                            }
                        }
                    }
                }
            },
            "ChangeThemeRequest": {
                "type": "object",
                "required": ["userTheme"],
                "properties": {
                    "userTheme": {
                        "type": "string",
                        "description": "User's theme",
                        "enum": ["light", "dark", "violet"],
                        "example": "light"
                    }
                }
            },
            "UpdateUserProfileRequest": {
                "type": "object",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "format": "binary",
                        "description": "User`s avatar. File in jpg or png",
                        "example": "avatar.jpg"
                    },
                    "name": {
                        "type": "string",
                        "description": "User's name. It may contain Latin letters, numbers, signs, in different cases. It may include from 2 to 32 signs inclusive",
                        "example": "Mark"
                    },
                    "email": {
                        "type": "string",
                        "description": "User's email. It may contain Latin letters, numbers, signs, in different cases. It must contain signs \"@\"\" and \".\" (in host part)",
                        "example": "mark@gmail.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password. It may contain Latin letters, numbers, signs, in different cases. It may include from 8 to 64 signs inclusive. Can't contain spaces.",
                        "example": "Mark1243"
                    }
                }
            },
            "UpdateUserProfileResponse": {
                "type": "object",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "example": "exampleAccessToken"
                    },
                    "refreshToken": {
                        "type": "string",
                        "example": "exampleRefreshToken"
                    },
                    "user": {
                        "type": "object",
                        "properties": {
                            "_id": {
                                "type": "string",
                                "description": "user's id in database",
                                "example": "64ec7c4dbab1cb55a780a0d4"
                            },
                            "name": {
                                "type": "string",
                                "description": "user's name",
                                "example": "Mark"
                            },
                            "email": {
                                "type": "string",
                                "description": "user's email",
                                "example": "mark@gmail.com"
                            },
                            "avatarURL": {
                                "type": "string",
                                "example": "https://exampleURL",
                                "description": "link to user's avatar or empty string if user have no avatar yet"
                            },
                            "theme": {
                                "type": "string",
                                "description": "user's theme",
                                "example": "light"
                            }
                        }
                    }
                }
            },
            "SendHelpLetterRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email. It may contain Latin letters, numbers, signs, in different cases. It must contain signs \"@\"\" and \".\" (in host part).",
                        "example": "mark@gmail.com"
                    },
                    "comment": {
                        "type": "string",
                        "description": "User's comment",
                        "example": "examplecomment"
                    }
                }
            },
            "SendHelpLetterResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Success letter",
                        "example": "Need Help email has been sent"
                    }
                }
            },
            "RefreshTokenRequest": {
                "type": "object",
                "properties": {
                    "refreshToken": {
                        "type": "string",
                        "description": "refreshToken",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWM3YzRkYmFiMWNiNTVhNzgwYTBkNCIsImlhdCI6MTY5MzkxMzcyMywiZXhwIjoxNjkzOTEzODQzfQ.idCG_1wBTso34eHr54IgV_kB6VTwPQ_5VT_XbUOzP_s"
                    }
                }
            },
            "RefreshTokenResponse": {
                "type": "object",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "accessToken",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWM3YzRkYmFiMWNiNTVhNzgwYTBkNCIsImlhdCI6MTY5MzkxMzcyMywiZXhwIjoxNjkzOTEzODQzfQ.idCG_1wBTso34eHr54IgV_kB6VTwPQ_5VT_XbUOzP_s"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "refreshToken",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWM3YzRkYmFiMWNiNTVhNzgwYTBkNCIsImlhdCI6MTY5MzkxMzcyMywiZXhwIjoxNjkzOTEzODQzfQ.idCG_1wBTso34eHr54IgV_kB6VTwPQ_5VT_XbUOzP_s"
                    }
                }
            },
            "ErrorBadRequest": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "400"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Bad request or description of error"
                    }
                }
            },
            "ErrorConflict": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "409"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Such email is already registered"
                    }
                }
            },
            "ErrorUnautorized": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "401"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Unautorized"
                    }
                }
            },
            "RefreshTokenForbidden": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "403"
                    },
                    "message": {
                        "type": "string",
                        "description": "Invalid token message",
                        "example": "Invalid token"
                    }
                }
            },
            "ErrorServerResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "500"
                    },
                    "message": {
                        "type": "string",
                        "description": "Server response message",
                        "example": "Server error"
                    }
                }
            },
            "GetAllBoardsResponse": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "type": "string",
                            "description": "Board's id",
                            "example": "64d360ea78fe376e4981199f"
                        },
                        "title": {
                            "type": "string",
                            "description": "Board's title",
                            "example": "First Board"
                        },
                        "icon": {
                            "type": "string",
                            "description": "Board's icons",
                            "enum": [
                                "four-balls",
                                "star",
                                "loading",
                                "puzzle",
                                "box",
                                "lightning",
                                "colors",
                                "hexagon"
                            ],
                            "example": "star"
                        },
                        "background": {
                        "type": "string",
                        "description": "Board's background",
                        "enum": [
                                "no-background",
                                "bg1",
                                "bg2",
                                "bg3",
                                "bg4",
                                "bg5",
                                "bg6",
                                "bg7",
                                "bg8",
                                "bg9",
                                "bg10",
                                "bg11",
                                "bg12",
                                "bg13",
                                "bg14",
                                "bg15"
                            ],
                        "example": "bg1"
                        },
                        "backgroundURL": {
                            "type": "object",
                            "properties": {
                                "mob-1x": {
                                    "type": "string",
                                    "description": "посилання на зображення для мобільної версії 1x",
                                    "example": "https://exampleURL"
                                },
                                    "mob-2x": {
                                    "type": "string",
                                    "description": "посилання на зображення для мобільної версії 2x",
                                    "example": "https://exampleURL"
                                },
                                    "tablet-1x": {
                                    "type": "string",
                                    "description": "посилання на зображення для планшетної версії 1x",
                                    "example": "https://exampleURL"
                                },
                                    "tablet-2x": {
                                    "type": "string",
                                    "description": "посилання на зображення для планшетної версії 2x",
                                    "example": "https://exampleURL"
                                },
                                    "desk-1x": {
                                    "type": "string",
                                    "description": "посилання на зображення для десктопної версії 1x",
                                    "example": "https://exampleURL"
                                },
                                "desk-2x": {
                                    "type": "string",
                                    "description": "посилання на зображення для десктопної версії 2x",
                                    "example": "https://exampleURL"
                                }
                            }
                        },
                        "owner": {
                            "type": "object",
                            "properties": {
                                "_id": {
                                    "type": "string",
                                    "description": "owner's id",
                                    "example": "64ec7c4dbab1cb55a780a0d4"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "owner's name",
                                    "example": "Mark"
                                },
                                "email": {
                                    "type": "string",
                                    "description": "owner's email",
                                    "example": "mark@gmail.com"
                                },
                                "avatarURL": {
                                    "type": "string",
                                    "description": "owner's avatar",
                                    "example": "https://exampleURL"
                                },
                                "userTheme": {
                                    "type": "string",
                                    "description": "user's theme",
                                    "example": "light"
                                }
                            }
                        }
                    }
                }
            },
            "GetBoardByIdResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Board's id",
                        "example": "64d360ea78fe376e4981199f"
                    },
                    "title": {
                        "type": "string",
                        "description": "Board's title",
                        "example": "First Board"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Board's icons",
                        "enum": [
                            "four-balls",
                            "star",
                            "loading",
                            "puzzle",
                            "box",
                            "lightning",
                            "colors",
                            "hexagon"
                        ],
                        "example": "star"
                    },
                    "background": {
                        "type": "string",
                        "description": "Board's background",
                        "enum": [
                            "no-background",
                            "bg1",
                            "bg2",
                            "bg3",
                            "bg4",
                            "bg5",
                            "bg6",
                            "bg7",
                            "bg8",
                            "bg9",
                            "bg10",
                            "bg11",
                            "bg12",
                            "bg13",
                            "bg14",
                            "bg15"
                        ],
                        "example": "bg1"
                    },
                    "backgroundURL": {
                        "type": "object",
                        "properties": {
                            "mob-1x": {
                                "type": "string",
                                "description": "посилання на зображення для мобільної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "mob-2x": {
                                "type": "string",
                                "description": "посилання на зображення для мобільної версії 2x",
                                "example": "https://exampleURL"
                            },
                            "tablet-1x": {
                                "type": "string",
                                "description": "посилання на зображення для планшетної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "tablet-2x": {
                                "type": "string",
                                "description": "посилання на зображення для планшетної версії 2x",
                                "example": "https://exampleURL"
                            },
                            "desk-1x": {
                                "type": "string",
                                "description": "посилання на зображення для десктопної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "desk-2x": {
                                "type": "string",
                                "description": "посилання на зображення для десктопної версії 2x",
                                "example": "https://exampleURL"
                            }
                        }
                    },
                    "owner": {
                        "type": "object",
                        "properties": {
                            "_id": {
                                "type": "string",
                                "description": "owner's id",
                                "example": "64ec7c4dbab1cb55a780a0d4"
                            },
                            "name": {
                                "type": "string",
                                "description": "owner's name",
                                "example": "Mark"
                            },
                            "email": {
                                "type": "string",
                                "description": "owner's email",
                                "example": "mark@gmail.com"
                            },
                            "avatarURL": {
                                "type": "string",
                                "description": "owner's avatar",
                                "example": "https://exampleURL"
                            },
                            "userTheme": {
                                "type": "string",
                                "description": "user's theme",
                                "example": "light"
                            }
                        }
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "_id": {
                                    "type": "string",
                                    "description": "Column's id",
                                    "example": "64ec7c4dbab1cb55a780a0d4"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Column's title",
                                    "example": "First column"
                                },
                                "cards": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "_id": {
                                                "type": "string",
                                                "description": "Card's id",
                                                "example": "64ec7c4dbab1cb55a780a0d4"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "Card's title",
                                                "example": "First card"
                                            },
                                            "description": {
                                                "type": "string",
                                                "description": "Card's description",
                                                "example": "Description"
                                            },
                                            "priority": {
                                                "type": "string",
                                                "description": "Card's priority",
                                                "example": "without priority",
                                                "enum": ["without priority", "low", "medium", "high"]
                                            },
                                            "deadline": {
                                                "type": "string",
                                                "description": "Card's deadline",
                                                "example": "DD-MM-YYYY"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AddBoardRequest": {
                "type": "object",
                "required": ["title"],
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Board's title",
                        "example": "First Board"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Board's icon",
                        "example": "star",
                        "enum": [
                            "four-balls",
                            "star",
                            "loading",
                            "puzzle",
                            "box",
                            "lightning",
                            "colors",
                            "hexagon"
                        ]
                    },
                    "background": {
                        "type": "string",
                        "description": "Board's",
                        "example": "bg1",
                        "enum": [
                            "bg1",
                            "bg2",
                            "bg3",
                            "bg4",
                            "bg5",
                            "bg6",
                            "bg7",
                            "bg8",
                            "bg9",
                            "bg10",
                            "bg11",
                            "bg12",
                            "bg13",
                            "bg14",
                            "bg15"
                        ]
                    }
                }
            },
            "AddBoardResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Board's id",
                        "example": "64d360ea78fe376e4981199f"
                    },
                    "title": {
                        "type": "string",
                        "description": "Board's title",
                        "example": "First Board"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Board's icons",
                        "enum": [
                            "four-balls",
                            "star",
                            "loading",
                            "puzzle",
                            "box",
                            "lightning",
                            "colors",
                            "hexagon"
                        ],
                        "example": "project"
                    },
                    "background": {
                        "type": "string",
                        "description": "Board's background",
                        "enum": [
                            "no-background",
                            "bg1",
                            "bg2",
                            "bg3",
                            "bg4",
                            "bg5",
                            "bg6",
                            "bg7",
                            "bg8",
                            "bg9",
                            "bg10",
                            "bg11",
                            "bg12",
                            "bg13",
                            "bg14",
                            "bg15"
                        ],
                        "example": "bg1"
                    },
                    "backgroundURL": {
                        "type": "object",
                        "properties": {
                            "mob-1x": {
                                "type": "string",
                                "description": "посилання на зображення для мобільної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "mob-2x": {
                                "type": "string",
                                "description": "посилання на зображення для мобільної версії 2x",
                                "example": "https://exampleURL"
                            },
                            "tablet-1x": {
                                "type": "string",
                                "description": "посилання на зображення для планшетної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "tablet-2x": {
                                "type": "string",
                                "description": "посилання на зображення для планшетної версії 2x",
                                "example": "https://exampleURL"
                            },
                            "desk-1x": {
                                "type": "string",
                                "description": "посилання на зображення для десктопної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "desk-2x": {
                                "type": "string",
                                "description": "посилання на зображення для десктопної версії 2x",
                                "example": "https://exampleURL"
                            }
                        }
                    },
                    "owner": {
                        "type": "string",
                        "description": "owner's id",
                        "example": "64ec7c4dbab1cb55a780a0d4"
                    }
                }
            },
            "DeleteBoardResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Board deleted",
                        "example": "Board deleted"
                    },
                    "deletedId": {
                        "type": "string",
                        "description": "Id Board's deleted",
                        "example": "exampleid"
                    }
                }
            },
            "UpdateBoardRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Board's title",
                        "example": "First Board"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Board's icon",
                        "example": "star",
                        "enum": [
                            "four-balls",
                            "star",
                            "loading",
                            "puzzle",
                            "box",
                            "lightning",
                            "colors",
                            "hexagon"
                        ]
                    },
                    "background": {
                        "type": "string",
                        "description": "Board's",
                        "example": "bg1",
                        "enum": [
                            "no-background",
                            "bg1",
                            "bg2",
                            "bg3",
                            "bg4",
                            "bg5",
                            "bg6",
                            "bg7",
                            "bg8",
                            "bg9",
                            "bg10",
                            "bg11",
                            "bg12",
                            "bg13",
                            "bg14",
                            "bg15"
                        ]
                    }
                }
            },
            "UpdateBoardResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Board's id",
                        "example": "64d360ea78fe376e4981199f"
                    },
                    "title": {
                        "type": "string",
                        "description": "Board's title",
                        "example": "First Board"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Board's icons",
                        "enum": [
                            "four-balls",
                            "star",
                            "loading",
                            "puzzle",
                            "box",
                            "lightning",
                            "colors",
                            "hexagon"
                        ],
                        "example": "star"
                    },
                    "background": {
                        "type": "string",
                        "description": "Board's background",
                        "enum": [
                            "no-background",
                            "bg1",
                            "bg2",
                            "bg3",
                            "bg4",
                            "bg5",
                            "bg6",
                            "bg7",
                            "bg8",
                            "bg9",
                            "bg10",
                            "bg11",
                            "bg12",
                            "bg13",
                            "bg14",
                            "bg15"
                        ],
                        "example": "bg1"
                    },
                    "backgroundURL": {
                        "type": "object",
                        "properties": {
                            "mob-1x": {
                                "type": "string",
                                "description": "посилання на зображення для мобільної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "mob-2x": {
                                "type": "string",
                                "description": "посилання на зображення для мобільної версії 2x",
                                "example": "https://exampleURL"
                            },
                            "tablet-1x": {
                                "type": "string",
                                "description": "посилання на зображення для планшетної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "tablet-2x": {
                                "type": "string",
                                "description": "посилання на зображення для планшетної версії 2x",
                                "example": "https://exampleURL"
                            },
                            "desk-1x": {
                                "type": "string",
                                "description": "посилання на зображення для десктопної версії 1x",
                                "example": "https://exampleURL"
                            },
                            "desk-2x": {
                                "type": "string",
                                "description": "посилання на зображення для десктопної версії 2x",
                                "example": "https://exampleURL"
                            }
                        }
                    },
                    "owner": {
                        "type": "string",
                        "description": "owner's id",
                        "example": "64ec7c4dbab1cb55a780a0d4"
                    }
                }
            },
            "ErrorAddBoard": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Error add new board",
                        "example": "Missing required title field"
                    }
                }
            },
            "ErrorBoardNotFound": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "404"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Board with id not found"
                    }
                }
            },
            "ErrorBoardUpdate": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "400"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Missing fields"
                    }
                }
            },
            "AddColumnRequest": {
                "type": "object",
                "required": ["title", "board"],
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Column's title",
                        "example": "First column"
                    },
                    "board": {
                        "type": "string",
                        "description": "Board's id",
                        "example": "64ec7c4dbab1cb55a780a0d4"
                    }
                }
            },
            "AddColumnResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    },
                    "title": {
                        "type": "string",
                        "description": "Column's title",
                        "example": "First column"
                    },
                    "board": {
                        "type": "string",
                        "description": "Boards's id",
                        "example": "64ec7c4dbab1cb55a780a0d4"
                    }
                }
            },
            "DeleteColumnResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Delete Column",
                        "example": "Column successfully deleted"
                    },
                    "deletedId": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    }
                }
            },
            "UpdateColumnRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Column's title",
                        "example": "First column"
                    },
                    "board": {
                        "type": "string",
                        "description": "Board's id",
                        "example": "64ec7c4dbab1cb55a780a0d4"
                    }
                }
            },
            "UpdateColumnResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    },
                    "title": {
                        "type": "string",
                        "description": "Column's title",
                        "example": "First column"
                    },
                    "board": {
                        "type": "string",
                        "description": "Boards's id",
                        "example": "64ec7c4dbab1cb55a780a0d4"
                    }
                }
            },
            "BadRequestColumn": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "400"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "missing required field"
                    }
                }
            },
            "NotFoundColumn": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "404"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Column with id not found"
                    }
                }
            },
            "ErrorConflictColumn": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "409"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Such column with title has already been added to this Board"
                    }
                }
            },
            "UpdateNotFoundColumn": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Column with id not found",
                        "example": "Column with id not found"
                    }
                }
            },
            "AddCardsRequest": {
                "type": "object",
                "required": ["title", "description", "column"],
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Card's title",
                        "example": "First card"
                    },
                    "description": {
                        "type": "string",
                        "description": "Card's description",
                        "example": "Description"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Card's priority",
                        "example": "without priority",
                        "enum": ["without priority", "low", "medium", "high"]
                    },
                    "deadline": {
                        "type": "string",
                        "description": "Card's deadline",
                        "example": "DD-MM-YYYY"
                    },
                    "column": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    }
                }
            },
            "AddCardsResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Card's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    },
                    "title": {
                        "type": "string",
                        "description": "Card's title",
                        "example": "First card"
                    },
                    "description": {
                        "type": "string",
                        "description": "Card's description",
                        "example": "Description"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Card's priority",
                        "example": "without priority",
                        "enum": ["without priority", "low", "medium", "high"]
                    },
                    "deadline": {
                        "type": "string",
                        "description": "Card's deadline",
                        "example": "DD-MM-YYYY"
                    },
                    "column": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    }
                }
            },
            "UpdateCardRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Card's title",
                        "example": "First card"
                    },
                    "description": {
                        "type": "string",
                        "description": "Card's description",
                        "example": "Description"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Card's priority",
                        "example": "without priority",
                        "enum": ["without priority", "low", "medium", "high"]
                    },
                    "deadline": {
                        "type": "string",
                        "description": "Card's deadline",
                        "example": "DD-MM-YYYY"
                    }
                }
            },
            "UpdateCardResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Card's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    },
                    "title": {
                        "type": "string",
                        "description": "Card's title",
                        "example": "First card"
                    },
                    "description": {
                        "type": "string",
                        "description": "Card's description",
                        "example": "Description"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Card's priority",
                        "example": "without priority",
                        "enum": ["without priority", "low", "medium", "high"]
                    },
                    "deadline": {
                        "type": "string",
                        "description": "Card's deadline",
                        "example": "DD-MM-YYYY"
                    },
                    "column": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    }
                }
            },
            "TransportCardRequest": {
                "type": "object",
                "properties": {
                    "source": {
                        "type": "string",
                        "description": "Present column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Future column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    }
                }
            },
            "TransportCardResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Card's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    },
                    "title": {
                        "type": "string",
                        "description": "Card's title",
                        "example": "First card"
                    },
                    "description": {
                        "type": "string",
                        "description": "Card's description",
                        "example": "Description"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Card's priority",
                        "example": "without priority",
                        "enum": ["without priority", "low", "medium", "high"]
                    },
                    "deadline": {
                        "type": "string",
                        "description": "Card's deadline",
                        "example": "DD-MM-YYYY"
                    },
                    "column": {
                        "type": "string",
                        "description": "Column's id",
                        "example": "64ec7c4dbab1cb55a780a0d7"
                    }
                }
            },
            "BadRequestCard": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "400"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "missing required field"
                    }
                }
            },
            "NotFoundCard": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "description": "Error status code",
                        "example": "404"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error message",
                        "example": "Card with id not found"
                    }
                }
            }
        }
    }
}
